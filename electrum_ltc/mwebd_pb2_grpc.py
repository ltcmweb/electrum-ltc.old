# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mwebd_pb2 as mwebd__pb2


class RpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/Rpc/Status',
                request_serializer=mwebd__pb2.StatusRequest.SerializeToString,
                response_deserializer=mwebd__pb2.StatusResponse.FromString,
                )
        self.Utxos = channel.unary_stream(
                '/Rpc/Utxos',
                request_serializer=mwebd__pb2.UtxosRequest.SerializeToString,
                response_deserializer=mwebd__pb2.Utxo.FromString,
                )
        self.Addresses = channel.unary_unary(
                '/Rpc/Addresses',
                request_serializer=mwebd__pb2.AddressRequest.SerializeToString,
                response_deserializer=mwebd__pb2.AddressResponse.FromString,
                )
        self.Spent = channel.unary_unary(
                '/Rpc/Spent',
                request_serializer=mwebd__pb2.SpentRequest.SerializeToString,
                response_deserializer=mwebd__pb2.SpentResponse.FromString,
                )
        self.Create = channel.unary_unary(
                '/Rpc/Create',
                request_serializer=mwebd__pb2.CreateRequest.SerializeToString,
                response_deserializer=mwebd__pb2.CreateResponse.FromString,
                )
        self.PsbtCreate = channel.unary_unary(
                '/Rpc/PsbtCreate',
                request_serializer=mwebd__pb2.PsbtCreateRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtResponse.FromString,
                )
        self.PsbtAddInput = channel.unary_unary(
                '/Rpc/PsbtAddInput',
                request_serializer=mwebd__pb2.PsbtAddInputRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtResponse.FromString,
                )
        self.PsbtAddRecipient = channel.unary_unary(
                '/Rpc/PsbtAddRecipient',
                request_serializer=mwebd__pb2.PsbtAddRecipientRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtResponse.FromString,
                )
        self.PsbtGetRecipients = channel.unary_unary(
                '/Rpc/PsbtGetRecipients',
                request_serializer=mwebd__pb2.PsbtGetRecipientsRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtGetRecipientsResponse.FromString,
                )
        self.PsbtSign = channel.unary_unary(
                '/Rpc/PsbtSign',
                request_serializer=mwebd__pb2.PsbtSignRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtResponse.FromString,
                )
        self.PsbtSignNonMweb = channel.unary_unary(
                '/Rpc/PsbtSignNonMweb',
                request_serializer=mwebd__pb2.PsbtSignNonMwebRequest.SerializeToString,
                response_deserializer=mwebd__pb2.PsbtResponse.FromString,
                )
        self.PsbtExtract = channel.unary_unary(
                '/Rpc/PsbtExtract',
                request_serializer=mwebd__pb2.PsbtExtractRequest.SerializeToString,
                response_deserializer=mwebd__pb2.CreateResponse.FromString,
                )
        self.LedgerExchange = channel.unary_unary(
                '/Rpc/LedgerExchange',
                request_serializer=mwebd__pb2.LedgerApdu.SerializeToString,
                response_deserializer=mwebd__pb2.LedgerApdu.FromString,
                )
        self.Broadcast = channel.unary_unary(
                '/Rpc/Broadcast',
                request_serializer=mwebd__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=mwebd__pb2.BroadcastResponse.FromString,
                )
        self.Coinswap = channel.unary_unary(
                '/Rpc/Coinswap',
                request_serializer=mwebd__pb2.CoinswapRequest.SerializeToString,
                response_deserializer=mwebd__pb2.CoinswapResponse.FromString,
                )


class RpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Get the sync status of the daemon. The block headers are
        synced first, followed by a subset of MWEB headers, and
        finally the MWEB utxo set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Utxos(self, request, context):
        """Get a continuous stream of unspent MWEB outputs (utxos)
        for an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Addresses(self, request, context):
        """Get a batch of MWEB addresses for an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Spent(self, request, context):
        """Check whether MWEB outputs are in the unspent set or not.
        This is used to determine when outputs have been spent by
        either this or another wallet using the same seed, and to
        determine when MWEB transactions have confirmed by checking
        the output IDs of the MWEB inputs and outputs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Create the MWEB portion of a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtCreate(self, request, context):
        """Create a PSBT from a raw transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtAddInput(self, request, context):
        """Add a MWEB input to a PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtAddRecipient(self, request, context):
        """Add a recipient to a PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtGetRecipients(self, request, context):
        """Get the recipients of a PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtSign(self, request, context):
        """Sign the MWEB portion of a PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtSignNonMweb(self, request, context):
        """Sign a non-MWEB input of a PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PsbtExtract(self, request, context):
        """Extract the raw transaction from a signed PSBT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LedgerExchange(self, request, context):
        """Process APDUs from the Ledger.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Broadcast(self, request, context):
        """Broadcast a transaction to the network. This is provided as
        existing broadcast services may not support MWEB transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Coinswap(self, request, context):
        """Submit a coinswap request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=mwebd__pb2.StatusRequest.FromString,
                    response_serializer=mwebd__pb2.StatusResponse.SerializeToString,
            ),
            'Utxos': grpc.unary_stream_rpc_method_handler(
                    servicer.Utxos,
                    request_deserializer=mwebd__pb2.UtxosRequest.FromString,
                    response_serializer=mwebd__pb2.Utxo.SerializeToString,
            ),
            'Addresses': grpc.unary_unary_rpc_method_handler(
                    servicer.Addresses,
                    request_deserializer=mwebd__pb2.AddressRequest.FromString,
                    response_serializer=mwebd__pb2.AddressResponse.SerializeToString,
            ),
            'Spent': grpc.unary_unary_rpc_method_handler(
                    servicer.Spent,
                    request_deserializer=mwebd__pb2.SpentRequest.FromString,
                    response_serializer=mwebd__pb2.SpentResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=mwebd__pb2.CreateRequest.FromString,
                    response_serializer=mwebd__pb2.CreateResponse.SerializeToString,
            ),
            'PsbtCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtCreate,
                    request_deserializer=mwebd__pb2.PsbtCreateRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtResponse.SerializeToString,
            ),
            'PsbtAddInput': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtAddInput,
                    request_deserializer=mwebd__pb2.PsbtAddInputRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtResponse.SerializeToString,
            ),
            'PsbtAddRecipient': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtAddRecipient,
                    request_deserializer=mwebd__pb2.PsbtAddRecipientRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtResponse.SerializeToString,
            ),
            'PsbtGetRecipients': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtGetRecipients,
                    request_deserializer=mwebd__pb2.PsbtGetRecipientsRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtGetRecipientsResponse.SerializeToString,
            ),
            'PsbtSign': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtSign,
                    request_deserializer=mwebd__pb2.PsbtSignRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtResponse.SerializeToString,
            ),
            'PsbtSignNonMweb': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtSignNonMweb,
                    request_deserializer=mwebd__pb2.PsbtSignNonMwebRequest.FromString,
                    response_serializer=mwebd__pb2.PsbtResponse.SerializeToString,
            ),
            'PsbtExtract': grpc.unary_unary_rpc_method_handler(
                    servicer.PsbtExtract,
                    request_deserializer=mwebd__pb2.PsbtExtractRequest.FromString,
                    response_serializer=mwebd__pb2.CreateResponse.SerializeToString,
            ),
            'LedgerExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.LedgerExchange,
                    request_deserializer=mwebd__pb2.LedgerApdu.FromString,
                    response_serializer=mwebd__pb2.LedgerApdu.SerializeToString,
            ),
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=mwebd__pb2.BroadcastRequest.FromString,
                    response_serializer=mwebd__pb2.BroadcastResponse.SerializeToString,
            ),
            'Coinswap': grpc.unary_unary_rpc_method_handler(
                    servicer.Coinswap,
                    request_deserializer=mwebd__pb2.CoinswapRequest.FromString,
                    response_serializer=mwebd__pb2.CoinswapResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Rpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Status',
            mwebd__pb2.StatusRequest.SerializeToString,
            mwebd__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Utxos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Rpc/Utxos',
            mwebd__pb2.UtxosRequest.SerializeToString,
            mwebd__pb2.Utxo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Addresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Addresses',
            mwebd__pb2.AddressRequest.SerializeToString,
            mwebd__pb2.AddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Spent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Spent',
            mwebd__pb2.SpentRequest.SerializeToString,
            mwebd__pb2.SpentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Create',
            mwebd__pb2.CreateRequest.SerializeToString,
            mwebd__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtCreate',
            mwebd__pb2.PsbtCreateRequest.SerializeToString,
            mwebd__pb2.PsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtAddInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtAddInput',
            mwebd__pb2.PsbtAddInputRequest.SerializeToString,
            mwebd__pb2.PsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtAddRecipient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtAddRecipient',
            mwebd__pb2.PsbtAddRecipientRequest.SerializeToString,
            mwebd__pb2.PsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtGetRecipients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtGetRecipients',
            mwebd__pb2.PsbtGetRecipientsRequest.SerializeToString,
            mwebd__pb2.PsbtGetRecipientsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtSign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtSign',
            mwebd__pb2.PsbtSignRequest.SerializeToString,
            mwebd__pb2.PsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtSignNonMweb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtSignNonMweb',
            mwebd__pb2.PsbtSignNonMwebRequest.SerializeToString,
            mwebd__pb2.PsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PsbtExtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/PsbtExtract',
            mwebd__pb2.PsbtExtractRequest.SerializeToString,
            mwebd__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LedgerExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/LedgerExchange',
            mwebd__pb2.LedgerApdu.SerializeToString,
            mwebd__pb2.LedgerApdu.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Broadcast',
            mwebd__pb2.BroadcastRequest.SerializeToString,
            mwebd__pb2.BroadcastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Coinswap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rpc/Coinswap',
            mwebd__pb2.CoinswapRequest.SerializeToString,
            mwebd__pb2.CoinswapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
